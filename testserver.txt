/*
    Simple udp server
*/
#include<stdio.h> //printf
#include<string.h> //memset
#include<stdlib.h> //exit(0);
#include <unistd.h>//close(s);
#include<arpa/inet.h>
#include<sys/socket.h>

 
#define BUFLEN 5  //Max length of buffer
#define PORT 8188   //The port on which to listen for incoming data
 
void die(char *s)
{
    perror(s);
    exit(1);
}
 
int main(void)
{
    struct sockaddr_in si_me, si_other;
    char path[1000];
    int s, recv_len;
    socklen_t slen = sizeof(si_other);
    char buf[BUFLEN];
    char *buff;
    FILE *fp;
    printf("Enter file path: ");
    scanf("%s", path);
    fp = fopen( path, "r");
    if(fp==NULL){
        printf("couldn't read Dx");
        return 1;
    }
    buff = malloc(sizeof(char)*1000000);
    if(buff == NULL){
        puts("malloc failed\n");
    fclose(fp);
    return 1;
  }  
  int read_size=0;
  read_size = fread(buff,sizeof(char),1000000,fp);
  if(read_size <= 0){
    fclose(fp);
    return 1;
  }
  
  fclose(fp);    
    
     
    //create a UDP socket
    if ((s=socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1)
    {
        die("socket");
    }
     
    // zero out the structure
    memset((char *) &si_me, 0, sizeof(si_me));
     
    si_me.sin_family = AF_INET;
    si_me.sin_port = htons(PORT);
    si_me.sin_addr.s_addr = htonl(INADDR_ANY);
     
    //bind socket to port
    if( bind(s , (struct sockaddr*)&si_me, sizeof(si_me) ) == -1)
    {
        die("bind");
    }
     
    //keep listening for data
    uint32_t flip;
    while(1)
    {
        printf("Waiting for data...");
        fflush(stdout);
         
        //try to receive some data, this is a blocking call
        if ((recv_len = recvfrom(s, buf, BUFLEN, 0, (struct sockaddr *)&si_other, &slen)) == -1){
			die("recv()");
		}
		
        uint32_t *location;
        location = (uint32_t *) buf;
		flip = ntohl(*location);
		//printf("Recieved buf %d",)
		printf("First Received %d\n",flip);////////////////all good
        if(flip > read_size){
            printf("overflow %d \n",flip);
			(flip) += 251;
			flip = htonl(flip);
			printf("send back data %d\n",ntohl(flip));
			memcpy(&buf[0],&flip,sizeof(flip));
        }
        else{
            buf[4] = *(buff + (flip));
			printf("%c is requested from client\n", buf[4]);
        }
        
          
          //uint32_t location = (uint32_t) (buf);
           // die("recvfrom()");
        
         
        //print details of the client/peer and the data received
        printf("Received packet from %s:%d\n", inet_ntoa(si_other.sin_addr), ntohs(si_other.sin_port));
        printf("Flip Data: %d\n" , flip);////////still correct
		printf("Buffer Data:%c @ %d\n", (char)(buf[4]),(*(uint32_t*)&buf[0]));

        
 
        //now reply the client with the same data
        if (sendto(s, buf, BUFLEN, 0, (struct sockaddr *)&si_other, slen) == -1)
        {
            die("sendto()");
        }
    }
 
    close(s);
    return 0;
}
